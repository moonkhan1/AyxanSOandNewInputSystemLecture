//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Creature assets/CreatureInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CreatureInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CreatureInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CreatureInput"",
    ""maps"": [
        {
            ""name"": ""Creature"",
            ""id"": ""8261ba36-ab3b-4bfb-a767-075066494a1c"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""39835166-9440-4274-83c9-95ee182a9d77"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""e91bf7fc-fd3a-414d-b6ce-cee53326fd73"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""c5d8e129-fa99-4d86-9d10-1b5a5148c79a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a9eb8b45-7868-4cba-b11e-d6b93e5d5289"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""abeca20c-54cf-43ca-a671-eef94ae4a21e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fa690c09-2507-4dad-bcf1-c0df8cd90e57"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""5a046e86-bce0-4f64-93b5-3ed496d78ef7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c412fc7-9493-4309-8292-d2353745c6fe"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Creature
        m_Creature = asset.FindActionMap("Creature", throwIfNotFound: true);
        m_Creature_Movement = m_Creature.FindAction("Movement", throwIfNotFound: true);
        m_Creature_Jump = m_Creature.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Creature
    private readonly InputActionMap m_Creature;
    private ICreatureActions m_CreatureActionsCallbackInterface;
    private readonly InputAction m_Creature_Movement;
    private readonly InputAction m_Creature_Jump;
    public struct CreatureActions
    {
        private @CreatureInput m_Wrapper;
        public CreatureActions(@CreatureInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Creature_Movement;
        public InputAction @Jump => m_Wrapper.m_Creature_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Creature; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreatureActions set) { return set.Get(); }
        public void SetCallbacks(ICreatureActions instance)
        {
            if (m_Wrapper.m_CreatureActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_CreatureActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_CreatureActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_CreatureActionsCallbackInterface.OnMovement;
                @Jump.started -= m_Wrapper.m_CreatureActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_CreatureActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_CreatureActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_CreatureActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public CreatureActions @Creature => new CreatureActions(this);
    public interface ICreatureActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
